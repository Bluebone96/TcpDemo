// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Unity {

  /// <summary>Holder for reflection information generated from PlayerInfo.proto</summary>
  public static partial class PlayerInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for PlayerInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBQbGF5ZXJJbmZvLnByb3RvEgtQcm90by5Vbml0eSKfAQoKUGxheWVySW5m",
            "bxIKCgJpZBgBIAEoDRIMCgRuYW1lGAIgASgJEgwKBHBvc1gYAyABKAISDAoE",
            "cG9zWhgEIAEoAhINCgVhbmdsZRgFIAEoAhIKCgJIcBgGIAEoDRINCgVzdGF0",
            "ZRgHIAEoDRINCgVzcGVlZBgIIAEoAhIiCgJvcBgJIAEoCzIWLlByb3RvLlVu",
            "aXR5Lk9wZXJhdGlvbiIhCglPcGVyYXRpb24SCQoBaBgBIAEoAhIJCgF2GAIg",
            "ASgCIi0KBENoYXQSCwoDaWRzGAEgASgNEgsKA2lkdBgCIAEoDRILCgNtc2cY",
            "AyABKAkiMAoOQXV0aGVudGljYXRpb24SDAoEbmFtZRgBIAEoCRIQCghwYXNz",
            "d29yZBgCIAEoCSJSCglJdGVtRXZlbnQSDgoGb3B0eXBlGAEgASgNEgsKA3Vp",
            "ZBgCIAEoDRINCgVjb3VudBgDIAEoDRIMCgRhZGQxGAUgASgJEgsKA3RpZBgE",
            "IAEoDSI1CgdJdGVtQWRkEg4KBm9wdHlwZRgBIAEoDRILCgN1aWQYAiABKA0S",
            "DQoFY291bnQYAyABKA0iNQoHSXRlbURlbBIOCgZvcHR5cGUYASABKA0SCwoD",
            "dWlkGAIgASgNEg0KBWNvdW50GAMgASgNIkQKCUl0ZW1UcmFkZRIOCgZvcHR5",
            "cGUYASABKA0SCwoDdWlkGAIgASgNEg0KBWNvdW50GAMgASgNEgsKA3RpZBgE",
            "IAEoDSIoCglJdGVtRXF1aXASDgoGb3B0eXBlGAEgASgNEgsKA3VpZBgCIAEo",
            "DSIqCgtJdGVtVW5FcXVpcBIOCgZvcHR5cGUYASABKA0SCwoDdWlkGAIgASgN",
            "IrYBCgVJdGVtcxIOCgZtX21hc2sYASABKA0SDQoFbV91aWQYAiABKA0SDgoG",
            "bV90eXBlGAMgASgNEgwKBG1fbHYYBCABKA0SDwoHbV9wcmljZRgIIAEoBRIw",
            "CgttX2F0dHJpYnV0ZRgJIAMoCzIbLlByb3RvLlVuaXR5Lkl0ZW1zQXR0cmli",
            "dXRlIi0KCElURU1UWVBFEgkKBU1PTkVZEAASCwoHQ09OU1VNRRABEgkKBUVR",
            "VUlQEAIihgEKDkl0ZW1zQXR0cmlidXRlEjkKBm1fdHlwZRgBIAEoDjIpLlBy",
            "b3RvLlVuaXR5Lkl0ZW1zQXR0cmlidXRlLkFUVFJJQlVURVRZUEUSDwoHbV92",
            "YWx1ZRgCIAEoAiIoCg1BVFRSSUJVVEVUWVBFEgYKAkhQEAASBgoCTVAQARIH",
            "CgNBVEsQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.PlayerInfo), global::Proto.Unity.PlayerInfo.Parser, new[]{ "Id", "Name", "PosX", "PosZ", "Angle", "Hp", "State", "Speed", "Op" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.Operation), global::Proto.Unity.Operation.Parser, new[]{ "H", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.Chat), global::Proto.Unity.Chat.Parser, new[]{ "Ids", "Idt", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.Authentication), global::Proto.Unity.Authentication.Parser, new[]{ "Name", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.ItemEvent), global::Proto.Unity.ItemEvent.Parser, new[]{ "Optype", "Uid", "Count", "Add1", "Tid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.ItemAdd), global::Proto.Unity.ItemAdd.Parser, new[]{ "Optype", "Uid", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.ItemDel), global::Proto.Unity.ItemDel.Parser, new[]{ "Optype", "Uid", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.ItemTrade), global::Proto.Unity.ItemTrade.Parser, new[]{ "Optype", "Uid", "Count", "Tid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.ItemEquip), global::Proto.Unity.ItemEquip.Parser, new[]{ "Optype", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.ItemUnEquip), global::Proto.Unity.ItemUnEquip.Parser, new[]{ "Optype", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.Items), global::Proto.Unity.Items.Parser, new[]{ "MMask", "MUid", "MType", "MLv", "MPrice", "MAttribute" }, null, new[]{ typeof(global::Proto.Unity.Items.Types.ITEMTYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Unity.ItemsAttribute), global::Proto.Unity.ItemsAttribute.Parser, new[]{ "MType", "MValue" }, null, new[]{ typeof(global::Proto.Unity.ItemsAttribute.Types.ATTRIBUTETYPE) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      posX_ = other.posX_;
      posZ_ = other.posZ_;
      angle_ = other.angle_;
      hp_ = other.hp_;
      state_ = other.state_;
      speed_ = other.speed_;
      op_ = other.op_ != null ? other.op_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 3;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posZ" field.</summary>
    public const int PosZFieldNumber = 4;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 5;
    private float angle_;
    /// <summary>
    /// repeated float Position = 3;
    /// repeated float Rotation = 4;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 6;
    private uint hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 7;
    private uint state_;
    /// <summary>
    /// 0 IDEL 1 WALK
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 8;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 9;
    private global::Proto.Unity.Operation op_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Unity.Operation Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (Hp != other.Hp) return false;
      if (State != other.State) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!object.Equals(Op, other.Op)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (op_ != null) hash ^= Op.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PosX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosX);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosZ);
      }
      if (Angle != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Angle);
      }
      if (Hp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Hp);
      }
      if (State != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(State);
      }
      if (Speed != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Speed);
      }
      if (op_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Op);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hp);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (op_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Op);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.op_ != null) {
        if (op_ == null) {
          Op = new global::Proto.Unity.Operation();
        }
        Op.MergeFrom(other.Op);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            PosX = input.ReadFloat();
            break;
          }
          case 37: {
            PosZ = input.ReadFloat();
            break;
          }
          case 45: {
            Angle = input.ReadFloat();
            break;
          }
          case 48: {
            Hp = input.ReadUInt32();
            break;
          }
          case 56: {
            State = input.ReadUInt32();
            break;
          }
          case 69: {
            Speed = input.ReadFloat();
            break;
          }
          case 74: {
            if (op_ == null) {
              Op = new global::Proto.Unity.Operation();
            }
            input.ReadMessage(Op);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Operation : pb::IMessage<Operation> {
    private static readonly pb::MessageParser<Operation> _parser = new pb::MessageParser<Operation>(() => new Operation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Operation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation(Operation other) : this() {
      h_ = other.h_;
      v_ = other.v_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation Clone() {
      return new Operation(this);
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 1;
    private float h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 2;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Operation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Operation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(H, other.H)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(V, other.V)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (H != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(H);
      if (V != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(V);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (H != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(H);
      }
      if (V != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(V);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (H != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Operation other) {
      if (other == null) {
        return;
      }
      if (other.H != 0F) {
        H = other.H;
      }
      if (other.V != 0F) {
        V = other.V;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            H = input.ReadFloat();
            break;
          }
          case 21: {
            V = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chat : pb::IMessage<Chat> {
    private static readonly pb::MessageParser<Chat> _parser = new pb::MessageParser<Chat>(() => new Chat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat(Chat other) : this() {
      ids_ = other.ids_;
      idt_ = other.idt_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat Clone() {
      return new Chat(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private uint ids_;
    /// <summary>
    /// 发起源id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ids {
      get { return ids_; }
      set {
        ids_ = value;
      }
    }

    /// <summary>Field number for the "idt" field.</summary>
    public const int IdtFieldNumber = 2;
    private uint idt_;
    /// <summary>
    /// 目标源id // -1 表示广播
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Idt {
      get { return idt_; }
      set {
        idt_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ids != other.Ids) return false;
      if (Idt != other.Idt) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ids != 0) hash ^= Ids.GetHashCode();
      if (Idt != 0) hash ^= Idt.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ids != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ids);
      }
      if (Idt != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Idt);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ids != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ids);
      }
      if (Idt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idt);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chat other) {
      if (other == null) {
        return;
      }
      if (other.Ids != 0) {
        Ids = other.Ids;
      }
      if (other.Idt != 0) {
        Idt = other.Idt;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ids = input.ReadUInt32();
            break;
          }
          case 16: {
            Idt = input.ReadUInt32();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Authentication : pb::IMessage<Authentication> {
    private static readonly pb::MessageParser<Authentication> _parser = new pb::MessageParser<Authentication>(() => new Authentication());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Authentication> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Authentication() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Authentication(Authentication other) : this() {
      name_ = other.name_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Authentication Clone() {
      return new Authentication(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Authentication);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Authentication other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Authentication other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// optype : value
  ///  0       basebag 增加物品，add1 为数量
  ///  1       basebag 减少物品，add1 为数量
  ///  2       basebag 使用物品，add1 为数量
  ///  3       money   增加， add1 为数量
  ///  4       money   减少   add1 为数量
  ///  5       equip   装备
  ///  6       unequip  卸下装备
  ///  7       trade   交易物品，add1 为数量， add2 为交易对象 id
  ///  8       
  /// </summary>
  public sealed partial class ItemEvent : pb::IMessage<ItemEvent> {
    private static readonly pb::MessageParser<ItemEvent> _parser = new pb::MessageParser<ItemEvent>(() => new ItemEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemEvent(ItemEvent other) : this() {
      optype_ = other.optype_;
      uid_ = other.uid_;
      count_ = other.count_;
      add1_ = other.add1_;
      tid_ = other.tid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemEvent Clone() {
      return new ItemEvent(this);
    }

    /// <summary>Field number for the "optype" field.</summary>
    public const int OptypeFieldNumber = 1;
    private uint optype_;
    /// <summary>
    /// 0 增加， 1 减少， 2 交易, 3 强化， 4 客户端更新属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Optype {
      get { return optype_; }
      set {
        optype_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    /// <summary>
    /// 物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "add1" field.</summary>
    public const int Add1FieldNumber = 5;
    private string add1_ = "";
    /// <summary>
    /// 增加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Add1 {
      get { return add1_; }
      set {
        add1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 4;
    private uint tid_;
    /// <summary>
    /// 交易对象id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Optype != other.Optype) return false;
      if (Uid != other.Uid) return false;
      if (Count != other.Count) return false;
      if (Add1 != other.Add1) return false;
      if (Tid != other.Tid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Optype != 0) hash ^= Optype.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Add1.Length != 0) hash ^= Add1.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Optype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Optype);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (Tid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Tid);
      }
      if (Add1.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Add1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Optype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Optype);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Add1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Add1);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemEvent other) {
      if (other == null) {
        return;
      }
      if (other.Optype != 0) {
        Optype = other.Optype;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Add1.Length != 0) {
        Add1 = other.Add1;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Optype = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
          case 32: {
            Tid = input.ReadUInt32();
            break;
          }
          case 42: {
            Add1 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemAdd : pb::IMessage<ItemAdd> {
    private static readonly pb::MessageParser<ItemAdd> _parser = new pb::MessageParser<ItemAdd>(() => new ItemAdd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemAdd(ItemAdd other) : this() {
      optype_ = other.optype_;
      uid_ = other.uid_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemAdd Clone() {
      return new ItemAdd(this);
    }

    /// <summary>Field number for the "optype" field.</summary>
    public const int OptypeFieldNumber = 1;
    private uint optype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Optype {
      get { return optype_; }
      set {
        optype_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Optype != other.Optype) return false;
      if (Uid != other.Uid) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Optype != 0) hash ^= Optype.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Optype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Optype);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Optype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Optype);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemAdd other) {
      if (other == null) {
        return;
      }
      if (other.Optype != 0) {
        Optype = other.Optype;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Optype = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemDel : pb::IMessage<ItemDel> {
    private static readonly pb::MessageParser<ItemDel> _parser = new pb::MessageParser<ItemDel>(() => new ItemDel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemDel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemDel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemDel(ItemDel other) : this() {
      optype_ = other.optype_;
      uid_ = other.uid_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemDel Clone() {
      return new ItemDel(this);
    }

    /// <summary>Field number for the "optype" field.</summary>
    public const int OptypeFieldNumber = 1;
    private uint optype_;
    /// <summary>
    /// 0 代表摧毁， 1 代表使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Optype {
      get { return optype_; }
      set {
        optype_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemDel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemDel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Optype != other.Optype) return false;
      if (Uid != other.Uid) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Optype != 0) hash ^= Optype.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Optype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Optype);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Optype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Optype);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemDel other) {
      if (other == null) {
        return;
      }
      if (other.Optype != 0) {
        Optype = other.Optype;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Optype = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemTrade : pb::IMessage<ItemTrade> {
    private static readonly pb::MessageParser<ItemTrade> _parser = new pb::MessageParser<ItemTrade>(() => new ItemTrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemTrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemTrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemTrade(ItemTrade other) : this() {
      optype_ = other.optype_;
      uid_ = other.uid_;
      count_ = other.count_;
      tid_ = other.tid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemTrade Clone() {
      return new ItemTrade(this);
    }

    /// <summary>Field number for the "optype" field.</summary>
    public const int OptypeFieldNumber = 1;
    private uint optype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Optype {
      get { return optype_; }
      set {
        optype_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 4;
    private uint tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemTrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemTrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Optype != other.Optype) return false;
      if (Uid != other.Uid) return false;
      if (Count != other.Count) return false;
      if (Tid != other.Tid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Optype != 0) hash ^= Optype.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Optype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Optype);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (Tid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Tid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Optype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Optype);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemTrade other) {
      if (other == null) {
        return;
      }
      if (other.Optype != 0) {
        Optype = other.Optype;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Optype = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
          case 32: {
            Tid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemEquip : pb::IMessage<ItemEquip> {
    private static readonly pb::MessageParser<ItemEquip> _parser = new pb::MessageParser<ItemEquip>(() => new ItemEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemEquip(ItemEquip other) : this() {
      optype_ = other.optype_;
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemEquip Clone() {
      return new ItemEquip(this);
    }

    /// <summary>Field number for the "optype" field.</summary>
    public const int OptypeFieldNumber = 1;
    private uint optype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Optype {
      get { return optype_; }
      set {
        optype_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Optype != other.Optype) return false;
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Optype != 0) hash ^= Optype.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Optype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Optype);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Optype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Optype);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemEquip other) {
      if (other == null) {
        return;
      }
      if (other.Optype != 0) {
        Optype = other.Optype;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Optype = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemUnEquip : pb::IMessage<ItemUnEquip> {
    private static readonly pb::MessageParser<ItemUnEquip> _parser = new pb::MessageParser<ItemUnEquip>(() => new ItemUnEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemUnEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemUnEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemUnEquip(ItemUnEquip other) : this() {
      optype_ = other.optype_;
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemUnEquip Clone() {
      return new ItemUnEquip(this);
    }

    /// <summary>Field number for the "optype" field.</summary>
    public const int OptypeFieldNumber = 1;
    private uint optype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Optype {
      get { return optype_; }
      set {
        optype_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemUnEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemUnEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Optype != other.Optype) return false;
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Optype != 0) hash ^= Optype.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Optype != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Optype);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Optype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Optype);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemUnEquip other) {
      if (other == null) {
        return;
      }
      if (other.Optype != 0) {
        Optype = other.Optype;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Optype = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Items : pb::IMessage<Items> {
    private static readonly pb::MessageParser<Items> _parser = new pb::MessageParser<Items>(() => new Items());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Items> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Items() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Items(Items other) : this() {
      mMask_ = other.mMask_;
      mUid_ = other.mUid_;
      mType_ = other.mType_;
      mLv_ = other.mLv_;
      mPrice_ = other.mPrice_;
      mAttribute_ = other.mAttribute_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Items Clone() {
      return new Items(this);
    }

    /// <summary>Field number for the "m_mask" field.</summary>
    public const int MMaskFieldNumber = 1;
    private uint mMask_;
    /// <summary>
    /// 或者 0不显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MMask {
      get { return mMask_; }
      set {
        mMask_ = value;
      }
    }

    /// <summary>Field number for the "m_uid" field.</summary>
    public const int MUidFieldNumber = 2;
    private uint mUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MUid {
      get { return mUid_; }
      set {
        mUid_ = value;
      }
    }

    /// <summary>Field number for the "m_type" field.</summary>
    public const int MTypeFieldNumber = 3;
    private uint mType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MType {
      get { return mType_; }
      set {
        mType_ = value;
      }
    }

    /// <summary>Field number for the "m_lv" field.</summary>
    public const int MLvFieldNumber = 4;
    private uint mLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MLv {
      get { return mLv_; }
      set {
        mLv_ = value;
      }
    }

    /// <summary>Field number for the "m_price" field.</summary>
    public const int MPriceFieldNumber = 8;
    private int mPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MPrice {
      get { return mPrice_; }
      set {
        mPrice_ = value;
      }
    }

    /// <summary>Field number for the "m_attribute" field.</summary>
    public const int MAttributeFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Proto.Unity.ItemsAttribute> _repeated_mAttribute_codec
        = pb::FieldCodec.ForMessage(74, global::Proto.Unity.ItemsAttribute.Parser);
    private readonly pbc::RepeatedField<global::Proto.Unity.ItemsAttribute> mAttribute_ = new pbc::RepeatedField<global::Proto.Unity.ItemsAttribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.Unity.ItemsAttribute> MAttribute {
      get { return mAttribute_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Items);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Items other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MMask != other.MMask) return false;
      if (MUid != other.MUid) return false;
      if (MType != other.MType) return false;
      if (MLv != other.MLv) return false;
      if (MPrice != other.MPrice) return false;
      if(!mAttribute_.Equals(other.mAttribute_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MMask != 0) hash ^= MMask.GetHashCode();
      if (MUid != 0) hash ^= MUid.GetHashCode();
      if (MType != 0) hash ^= MType.GetHashCode();
      if (MLv != 0) hash ^= MLv.GetHashCode();
      if (MPrice != 0) hash ^= MPrice.GetHashCode();
      hash ^= mAttribute_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MMask != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MMask);
      }
      if (MUid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MUid);
      }
      if (MType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MType);
      }
      if (MLv != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MLv);
      }
      if (MPrice != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MPrice);
      }
      mAttribute_.WriteTo(output, _repeated_mAttribute_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MMask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MMask);
      }
      if (MUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MUid);
      }
      if (MType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MType);
      }
      if (MLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MLv);
      }
      if (MPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MPrice);
      }
      size += mAttribute_.CalculateSize(_repeated_mAttribute_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Items other) {
      if (other == null) {
        return;
      }
      if (other.MMask != 0) {
        MMask = other.MMask;
      }
      if (other.MUid != 0) {
        MUid = other.MUid;
      }
      if (other.MType != 0) {
        MType = other.MType;
      }
      if (other.MLv != 0) {
        MLv = other.MLv;
      }
      if (other.MPrice != 0) {
        MPrice = other.MPrice;
      }
      mAttribute_.Add(other.mAttribute_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MMask = input.ReadUInt32();
            break;
          }
          case 16: {
            MUid = input.ReadUInt32();
            break;
          }
          case 24: {
            MType = input.ReadUInt32();
            break;
          }
          case 32: {
            MLv = input.ReadUInt32();
            break;
          }
          case 64: {
            MPrice = input.ReadInt32();
            break;
          }
          case 74: {
            mAttribute_.AddEntriesFrom(input, _repeated_mAttribute_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Items message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ITEMTYPE {
        [pbr::OriginalName("MONEY")] Money = 0,
        [pbr::OriginalName("CONSUME")] Consume = 1,
        [pbr::OriginalName("EQUIP")] Equip = 2,
      }

    }
    #endregion

  }

  public sealed partial class ItemsAttribute : pb::IMessage<ItemsAttribute> {
    private static readonly pb::MessageParser<ItemsAttribute> _parser = new pb::MessageParser<ItemsAttribute>(() => new ItemsAttribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemsAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Unity.PlayerInfoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemsAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemsAttribute(ItemsAttribute other) : this() {
      mType_ = other.mType_;
      mValue_ = other.mValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemsAttribute Clone() {
      return new ItemsAttribute(this);
    }

    /// <summary>Field number for the "m_type" field.</summary>
    public const int MTypeFieldNumber = 1;
    private global::Proto.Unity.ItemsAttribute.Types.ATTRIBUTETYPE mType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Unity.ItemsAttribute.Types.ATTRIBUTETYPE MType {
      get { return mType_; }
      set {
        mType_ = value;
      }
    }

    /// <summary>Field number for the "m_value" field.</summary>
    public const int MValueFieldNumber = 2;
    private float mValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MValue {
      get { return mValue_; }
      set {
        mValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemsAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemsAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MType != other.MType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MValue, other.MValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MType != 0) hash ^= MType.GetHashCode();
      if (MValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MType);
      }
      if (MValue != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MType);
      }
      if (MValue != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemsAttribute other) {
      if (other == null) {
        return;
      }
      if (other.MType != 0) {
        MType = other.MType;
      }
      if (other.MValue != 0F) {
        MValue = other.MValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MType = (global::Proto.Unity.ItemsAttribute.Types.ATTRIBUTETYPE) input.ReadEnum();
            break;
          }
          case 21: {
            MValue = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ItemsAttribute message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ATTRIBUTETYPE {
        [pbr::OriginalName("HP")] Hp = 0,
        [pbr::OriginalName("MP")] Mp = 1,
        [pbr::OriginalName("ATK")] Atk = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
