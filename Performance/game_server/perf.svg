<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>ip_output (5 samples, 7.46%)</title><rect x="1101.9" y="309" width="88.1" height="15.0" fill="rgb(229,161,48)" rx="2" ry="2" />
<text  x="1104.94" y="319.5" >ip_output</text>
</g>
<g >
<title>ksys_write (5 samples, 7.46%)</title><rect x="1101.9" y="485" width="88.1" height="15.0" fill="rgb(244,162,8)" rx="2" ry="2" />
<text  x="1104.94" y="495.5" >ksys_write</text>
</g>
<g >
<title>net_rx_action (5 samples, 7.46%)</title><rect x="1101.9" y="213" width="88.1" height="15.0" fill="rgb(217,82,44)" rx="2" ry="2" />
<text  x="1104.94" y="223.5" >net_rx_act..</text>
</g>
<g >
<title>ip_finish_output2 (3 samples, 4.48%)</title><rect x="1013.9" y="341" width="52.8" height="15.0" fill="rgb(212,178,43)" rx="2" ry="2" />
<text  x="1016.88" y="351.5" >ip_fi..</text>
</g>
<g >
<title>__tcp_push_pending_frames (5 samples, 7.46%)</title><rect x="1101.9" y="373" width="88.1" height="15.0" fill="rgb(227,60,12)" rx="2" ry="2" />
<text  x="1104.94" y="383.5" >__tcp_push..</text>
</g>
<g >
<title>do_softirq.part.19 (5 samples, 7.46%)</title><rect x="1101.9" y="261" width="88.1" height="15.0" fill="rgb(218,87,6)" rx="2" ry="2" />
<text  x="1104.94" y="271.5" >do_softirq..</text>
</g>
<g >
<title>__ip_queue_xmit (5 samples, 7.46%)</title><rect x="1101.9" y="325" width="88.1" height="15.0" fill="rgb(215,154,32)" rx="2" ry="2" />
<text  x="1104.94" y="335.5" >__ip_queue..</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (28 samples, 41.79%)</title><rect x="309.4" y="437" width="493.1" height="15.0" fill="rgb(246,5,3)" rx="2" ry="2" />
<text  x="312.40" y="447.5" >schedule_hrtimeout_range_clock</text>
</g>
<g >
<title>tcp_write_xmit (5 samples, 7.46%)</title><rect x="1101.9" y="357" width="88.1" height="15.0" fill="rgb(250,26,13)" rx="2" ry="2" />
<text  x="1104.94" y="367.5" >tcp_write_..</text>
</g>
<g >
<title>process_backlog (5 samples, 7.46%)</title><rect x="1101.9" y="197" width="88.1" height="15.0" fill="rgb(238,140,50)" rx="2" ry="2" />
<text  x="1104.94" y="207.5" >process_ba..</text>
</g>
<g >
<title>new_sync_read (8 samples, 11.94%)</title><rect x="961.0" y="453" width="140.9" height="15.0" fill="rgb(209,139,4)" rx="2" ry="2" />
<text  x="964.04" y="463.5" >new_sync_read</text>
</g>
<g >
<title>kmem_cache_free (1 samples, 1.49%)</title><rect x="1031.5" y="117" width="17.6" height="15.0" fill="rgb(232,93,3)" rx="2" ry="2" />
<text  x="1034.49" y="127.5" ></text>
</g>
<g >
<title>ep_poll (34 samples, 50.75%)</title><rect x="203.7" y="453" width="598.8" height="15.0" fill="rgb(242,11,42)" rx="2" ry="2" />
<text  x="206.73" y="463.5" >ep_poll</text>
</g>
<g >
<title>tcp_rcv_space_adjust (1 samples, 1.49%)</title><rect x="1084.3" y="389" width="17.6" height="15.0" fill="rgb(250,58,28)" rx="2" ry="2" />
<text  x="1087.33" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (36 samples, 53.73%)</title><rect x="168.5" y="485" width="634.0" height="15.0" fill="rgb(235,75,35)" rx="2" ry="2" />
<text  x="171.51" y="495.5" >__x64_sys_epoll_wait</text>
</g>
<g >
<title>tcp_v4_do_rcv (5 samples, 7.46%)</title><rect x="1101.9" y="101" width="88.1" height="15.0" fill="rgb(237,168,33)" rx="2" ry="2" />
<text  x="1104.94" y="111.5" >tcp_v4_do_..</text>
</g>
<g >
<title>__ip_queue_xmit (3 samples, 4.48%)</title><rect x="1013.9" y="373" width="52.8" height="15.0" fill="rgb(249,219,48)" rx="2" ry="2" />
<text  x="1016.88" y="383.5" >__ip_..</text>
</g>
<g >
<title>tcp_rcv_established (2 samples, 2.99%)</title><rect x="1013.9" y="133" width="35.2" height="15.0" fill="rgb(206,22,35)" rx="2" ry="2" />
<text  x="1016.88" y="143.5" >tc..</text>
</g>
<g >
<title>__local_bh_enable_ip (5 samples, 7.46%)</title><rect x="1101.9" y="277" width="88.1" height="15.0" fill="rgb(227,135,8)" rx="2" ry="2" />
<text  x="1104.94" y="287.5" >__local_bh..</text>
</g>
<g >
<title>do_softirq_own_stack (3 samples, 4.48%)</title><rect x="1013.9" y="293" width="52.8" height="15.0" fill="rgb(254,151,20)" rx="2" ry="2" />
<text  x="1016.88" y="303.5" >do_so..</text>
</g>
<g >
<title>tcp_v4_do_rcv (2 samples, 2.99%)</title><rect x="1013.9" y="149" width="35.2" height="15.0" fill="rgb(237,211,42)" rx="2" ry="2" />
<text  x="1016.88" y="159.5" >tc..</text>
</g>
<g >
<title>tcp_v4_inbound_md5_hash (1 samples, 1.49%)</title><rect x="1049.1" y="149" width="17.6" height="15.0" fill="rgb(238,65,2)" rx="2" ry="2" />
<text  x="1052.10" y="159.5" ></text>
</g>
<g >
<title>release_sock (1 samples, 1.49%)</title><rect x="1066.7" y="389" width="17.6" height="15.0" fill="rgb(213,37,39)" rx="2" ry="2" />
<text  x="1069.72" y="399.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (3 samples, 4.48%)</title><rect x="1013.9" y="229" width="52.8" height="15.0" fill="rgb(232,88,10)" rx="2" ry="2" />
<text  x="1016.88" y="239.5" >__net..</text>
</g>
<g >
<title>ip_local_deliver (5 samples, 7.46%)</title><rect x="1101.9" y="149" width="88.1" height="15.0" fill="rgb(249,173,23)" rx="2" ry="2" />
<text  x="1104.94" y="159.5" >ip_local_d..</text>
</g>
<g >
<title>read_tsc (1 samples, 1.49%)</title><rect x="291.8" y="421" width="17.6" height="15.0" fill="rgb(246,198,6)" rx="2" ry="2" />
<text  x="294.79" y="431.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (3 samples, 4.48%)</title><rect x="1013.9" y="389" width="52.8" height="15.0" fill="rgb(231,216,5)" rx="2" ry="2" />
<text  x="1016.88" y="399.5" >__tcp..</text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 1.49%)</title><rect x="978.7" y="389" width="17.6" height="15.0" fill="rgb(212,211,18)" rx="2" ry="2" />
<text  x="981.66" y="399.5" ></text>
</g>
<g >
<title>do_nanosleep (7 samples, 10.45%)</title><rect x="837.8" y="453" width="123.2" height="15.0" fill="rgb(215,141,39)" rx="2" ry="2" />
<text  x="840.76" y="463.5" >do_nanosleep</text>
</g>
<g >
<title>ip_local_deliver_finish (5 samples, 7.46%)</title><rect x="1101.9" y="133" width="88.1" height="15.0" fill="rgb(243,55,45)" rx="2" ry="2" />
<text  x="1104.94" y="143.5" >ip_local_d..</text>
</g>
<g >
<title>vfs_write (5 samples, 7.46%)</title><rect x="1101.9" y="469" width="88.1" height="15.0" fill="rgb(244,111,23)" rx="2" ry="2" />
<text  x="1104.94" y="479.5" >vfs_write</text>
</g>
<g >
<title>finish_task_switch (28 samples, 41.79%)</title><rect x="309.4" y="389" width="493.1" height="15.0" fill="rgb(231,228,34)" rx="2" ry="2" />
<text  x="312.40" y="399.5" >finish_task_switch</text>
</g>
<g >
<title>__fget_light (2 samples, 2.99%)</title><rect x="168.5" y="453" width="35.2" height="15.0" fill="rgb(250,212,40)" rx="2" ry="2" />
<text  x="171.51" y="463.5" >__..</text>
</g>
<g >
<title>tcp_md5_do_lookup (1 samples, 1.49%)</title><rect x="1049.1" y="133" width="17.6" height="15.0" fill="rgb(211,139,10)" rx="2" ry="2" />
<text  x="1052.10" y="143.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (5 samples, 7.46%)</title><rect x="1101.9" y="229" width="88.1" height="15.0" fill="rgb(220,69,2)" rx="2" ry="2" />
<text  x="1104.94" y="239.5" >__softirqe..</text>
</g>
<g >
<title>ktime_get_ts64 (1 samples, 1.49%)</title><rect x="291.8" y="437" width="17.6" height="15.0" fill="rgb(238,13,30)" rx="2" ry="2" />
<text  x="294.79" y="447.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 1.49%)</title><rect x="1084.3" y="373" width="17.6" height="15.0" fill="rgb(235,68,25)" rx="2" ry="2" />
<text  x="1087.33" y="383.5" ></text>
</g>
<g >
<title>tcp_sendmsg (5 samples, 7.46%)</title><rect x="1101.9" y="405" width="88.1" height="15.0" fill="rgb(249,86,0)" rx="2" ry="2" />
<text  x="1104.94" y="415.5" >tcp_sendmsg</text>
</g>
<g >
<title>__tcp_push_pending_frames (1 samples, 1.49%)</title><rect x="1013.9" y="117" width="17.6" height="15.0" fill="rgb(214,88,38)" rx="2" ry="2" />
<text  x="1016.88" y="127.5" ></text>
</g>
<g >
<title>game_server (67 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(216,179,18)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >game_server</text>
</g>
<g >
<title>schedule (7 samples, 10.45%)</title><rect x="837.8" y="437" width="123.2" height="15.0" fill="rgb(210,80,11)" rx="2" ry="2" />
<text  x="840.76" y="447.5" >schedule</text>
</g>
<g >
<title>schedule (28 samples, 41.79%)</title><rect x="309.4" y="421" width="493.1" height="15.0" fill="rgb(243,187,0)" rx="2" ry="2" />
<text  x="312.40" y="431.5" >schedule</text>
</g>
<g >
<title>sock_def_readable (5 samples, 7.46%)</title><rect x="1101.9" y="69" width="88.1" height="15.0" fill="rgb(210,150,8)" rx="2" ry="2" />
<text  x="1104.94" y="79.5" >sock_def_r..</text>
</g>
<g >
<title>__schedule (7 samples, 10.45%)</title><rect x="837.8" y="421" width="123.2" height="15.0" fill="rgb(206,37,15)" rx="2" ry="2" />
<text  x="840.76" y="431.5" >__schedule</text>
</g>
<g >
<title>do_softirq_own_stack (5 samples, 7.46%)</title><rect x="1101.9" y="245" width="88.1" height="15.0" fill="rgb(252,177,22)" rx="2" ry="2" />
<text  x="1104.94" y="255.5" >do_softirq..</text>
</g>
<g >
<title>do_epoll_wait (36 samples, 53.73%)</title><rect x="168.5" y="469" width="634.0" height="15.0" fill="rgb(246,82,36)" rx="2" ry="2" />
<text  x="171.51" y="479.5" >do_epoll_wait</text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 1.49%)</title><rect x="1066.7" y="357" width="17.6" height="15.0" fill="rgb(241,163,19)" rx="2" ry="2" />
<text  x="1069.72" y="367.5" ></text>
</g>
<g >
<title>tcp_write_xmit (1 samples, 1.49%)</title><rect x="1013.9" y="101" width="17.6" height="15.0" fill="rgb(231,160,28)" rx="2" ry="2" />
<text  x="1016.88" y="111.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (3 samples, 4.48%)</title><rect x="1013.9" y="165" width="52.8" height="15.0" fill="rgb(211,155,35)" rx="2" ry="2" />
<text  x="1016.88" y="175.5" >tcp_v..</text>
</g>
<g >
<title>_copy_from_user (1 samples, 1.49%)</title><rect x="820.1" y="453" width="17.7" height="15.0" fill="rgb(213,229,6)" rx="2" ry="2" />
<text  x="823.15" y="463.5" ></text>
</g>
<g >
<title>__fget (2 samples, 2.99%)</title><rect x="168.5" y="437" width="35.2" height="15.0" fill="rgb(235,104,48)" rx="2" ry="2" />
<text  x="171.51" y="447.5" >__..</text>
</g>
<g >
<title>process_backlog (3 samples, 4.48%)</title><rect x="1013.9" y="245" width="52.8" height="15.0" fill="rgb(212,75,7)" rx="2" ry="2" />
<text  x="1016.88" y="255.5" >proce..</text>
</g>
<g >
<title>__x64_sys_nanosleep (9 samples, 13.43%)</title><rect x="802.5" y="485" width="158.5" height="15.0" fill="rgb(253,215,34)" rx="2" ry="2" />
<text  x="805.54" y="495.5" >__x64_sys_nanosleep</text>
</g>
<g >
<title>__netif_receive_skb_one_core (5 samples, 7.46%)</title><rect x="1101.9" y="181" width="88.1" height="15.0" fill="rgb(214,169,1)" rx="2" ry="2" />
<text  x="1104.94" y="191.5" >__netif_re..</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 1.49%)</title><rect x="978.7" y="341" width="17.6" height="15.0" fill="rgb(235,171,9)" rx="2" ry="2" />
<text  x="981.66" y="351.5" ></text>
</g>
<g >
<title>vfs_read (8 samples, 11.94%)</title><rect x="961.0" y="469" width="140.9" height="15.0" fill="rgb(211,187,47)" rx="2" ry="2" />
<text  x="964.04" y="479.5" >vfs_read</text>
</g>
<g >
<title>tcp_recvmsg (8 samples, 11.94%)</title><rect x="961.0" y="405" width="140.9" height="15.0" fill="rgb(229,208,9)" rx="2" ry="2" />
<text  x="964.04" y="415.5" >tcp_recvmsg</text>
</g>
<g >
<title>e1000_alloc_rx_buffers (1 samples, 1.49%)</title><rect x="978.7" y="277" width="17.6" height="15.0" fill="rgb(237,64,42)" rx="2" ry="2" />
<text  x="981.66" y="287.5" ></text>
</g>
<g >
<title>do_softirq.part.19 (1 samples, 1.49%)</title><rect x="978.7" y="373" width="17.6" height="15.0" fill="rgb(224,167,20)" rx="2" ry="2" />
<text  x="981.66" y="383.5" ></text>
</g>
<g >
<title>ip_finish_output2 (5 samples, 7.46%)</title><rect x="1101.9" y="293" width="88.1" height="15.0" fill="rgb(212,216,5)" rx="2" ry="2" />
<text  x="1104.94" y="303.5" >ip_finish_..</text>
</g>
<g >
<title>__release_sock (1 samples, 1.49%)</title><rect x="1066.7" y="373" width="17.6" height="15.0" fill="rgb(241,28,14)" rx="2" ry="2" />
<text  x="1069.72" y="383.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (5 samples, 7.46%)</title><rect x="1101.9" y="341" width="88.1" height="15.0" fill="rgb(225,140,33)" rx="2" ry="2" />
<text  x="1104.94" y="351.5" >__tcp_tran..</text>
</g>
<g >
<title>all (67 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(237,32,37)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>__tcp_send_ack.part.44 (1 samples, 1.49%)</title><rect x="996.3" y="389" width="17.6" height="15.0" fill="rgb(252,127,46)" rx="2" ry="2" />
<text  x="999.27" y="399.5" ></text>
</g>
<g >
<title>ip_rcv (5 samples, 7.46%)</title><rect x="1101.9" y="165" width="88.1" height="15.0" fill="rgb(235,172,35)" rx="2" ry="2" />
<text  x="1104.94" y="175.5" >ip_rcv</text>
</g>
<g >
<title>__schedule (28 samples, 41.79%)</title><rect x="309.4" y="405" width="493.1" height="15.0" fill="rgb(225,219,35)" rx="2" ry="2" />
<text  x="312.40" y="415.5" >__schedule</text>
</g>
<g >
<title>ip_rcv (3 samples, 4.48%)</title><rect x="1013.9" y="213" width="52.8" height="15.0" fill="rgb(238,167,35)" rx="2" ry="2" />
<text  x="1016.88" y="223.5" >ip_rcv</text>
</g>
<g >
<title>ip_output (3 samples, 4.48%)</title><rect x="1013.9" y="357" width="52.8" height="15.0" fill="rgb(238,50,21)" rx="2" ry="2" />
<text  x="1016.88" y="367.5" >ip_ou..</text>
</g>
<g >
<title>tcp_sendmsg_locked (5 samples, 7.46%)</title><rect x="1101.9" y="389" width="88.1" height="15.0" fill="rgb(213,32,24)" rx="2" ry="2" />
<text  x="1104.94" y="399.5" >tcp_sendms..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (5 samples, 7.46%)</title><rect x="1101.9" y="37" width="88.1" height="15.0" fill="rgb(207,221,5)" rx="2" ry="2" />
<text  x="1104.94" y="47.5" >_raw_spin_..</text>
</g>
<g >
<title>ip_local_deliver (3 samples, 4.48%)</title><rect x="1013.9" y="197" width="52.8" height="15.0" fill="rgb(235,203,14)" rx="2" ry="2" />
<text  x="1016.88" y="207.5" >ip_lo..</text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 1.49%)</title><rect x="978.7" y="357" width="17.6" height="15.0" fill="rgb(246,72,21)" rx="2" ry="2" />
<text  x="981.66" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (58 samples, 86.57%)</title><rect x="168.5" y="501" width="1021.5" height="15.0" fill="rgb(244,44,1)" rx="2" ry="2" />
<text  x="171.51" y="511.5" >do_syscall_64</text>
</g>
<g >
<title>e1000_clean (1 samples, 1.49%)</title><rect x="978.7" y="309" width="17.6" height="15.0" fill="rgb(241,177,33)" rx="2" ry="2" />
<text  x="981.66" y="319.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (3 samples, 4.48%)</title><rect x="1013.9" y="277" width="52.8" height="15.0" fill="rgb(207,162,37)" rx="2" ry="2" />
<text  x="1016.88" y="287.5" >__sof..</text>
</g>
<g >
<title>e1000_clean_rx_irq (1 samples, 1.49%)</title><rect x="978.7" y="293" width="17.6" height="15.0" fill="rgb(208,123,40)" rx="2" ry="2" />
<text  x="981.66" y="303.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (5 samples, 7.46%)</title><rect x="1101.9" y="53" width="88.1" height="15.0" fill="rgb(228,199,24)" rx="2" ry="2" />
<text  x="1104.94" y="63.5" >__wake_up_..</text>
</g>
<g >
<title>tcp_rcv_established (5 samples, 7.46%)</title><rect x="1101.9" y="85" width="88.1" height="15.0" fill="rgb(226,193,50)" rx="2" ry="2" />
<text  x="1104.94" y="95.5" >tcp_rcv_es..</text>
</g>
<g >
<title>sock_sendmsg (5 samples, 7.46%)</title><rect x="1101.9" y="421" width="88.1" height="15.0" fill="rgb(228,213,34)" rx="2" ry="2" />
<text  x="1104.94" y="431.5" >sock_sendmsg</text>
</g>
<g >
<title>net_rx_action (3 samples, 4.48%)</title><rect x="1013.9" y="261" width="52.8" height="15.0" fill="rgb(228,165,4)" rx="2" ry="2" />
<text  x="1016.88" y="271.5" >net_r..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (58 samples, 86.57%)</title><rect x="168.5" y="517" width="1021.5" height="15.0" fill="rgb(231,224,6)" rx="2" ry="2" />
<text  x="171.51" y="527.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>ksys_read (8 samples, 11.94%)</title><rect x="961.0" y="485" width="140.9" height="15.0" fill="rgb(231,134,6)" rx="2" ry="2" />
<text  x="964.04" y="495.5" >ksys_read</text>
</g>
<g >
<title>new_sync_write (5 samples, 7.46%)</title><rect x="1101.9" y="453" width="88.1" height="15.0" fill="rgb(248,118,36)" rx="2" ry="2" />
<text  x="1104.94" y="463.5" >new_sync_w..</text>
</g>
<g >
<title>inet_recvmsg (8 samples, 11.94%)</title><rect x="961.0" y="421" width="140.9" height="15.0" fill="rgb(249,32,21)" rx="2" ry="2" />
<text  x="964.04" y="431.5" >inet_recvmsg</text>
</g>
<g >
<title>hrtimer_nanosleep (7 samples, 10.45%)</title><rect x="837.8" y="469" width="123.2" height="15.0" fill="rgb(228,9,52)" rx="2" ry="2" />
<text  x="840.76" y="479.5" >hrtimer_nanosleep</text>
</g>
<g >
<title>__local_bh_enable_ip (3 samples, 4.48%)</title><rect x="1013.9" y="325" width="52.8" height="15.0" fill="rgb(212,188,6)" rx="2" ry="2" />
<text  x="1016.88" y="335.5" >__loc..</text>
</g>
<g >
<title>ep_scan_ready_list.constprop.22 (1 samples, 1.49%)</title><rect x="274.2" y="437" width="17.6" height="15.0" fill="rgb(211,223,21)" rx="2" ry="2" />
<text  x="277.18" y="447.5" ></text>
</g>
<g >
<title>net_rx_action (1 samples, 1.49%)</title><rect x="978.7" y="325" width="17.6" height="15.0" fill="rgb(208,2,6)" rx="2" ry="2" />
<text  x="981.66" y="335.5" ></text>
</g>
<g >
<title>do_softirq.part.19 (3 samples, 4.48%)</title><rect x="1013.9" y="309" width="52.8" height="15.0" fill="rgb(243,34,19)" rx="2" ry="2" />
<text  x="1016.88" y="319.5" >do_so..</text>
</g>
<g >
<title>tcp_v4_rcv (5 samples, 7.46%)</title><rect x="1101.9" y="117" width="88.1" height="15.0" fill="rgb(214,62,43)" rx="2" ry="2" />
<text  x="1104.94" y="127.5" >tcp_v4_rcv</text>
</g>
<g >
<title>ip_local_deliver_finish (3 samples, 4.48%)</title><rect x="1013.9" y="181" width="52.8" height="15.0" fill="rgb(222,161,0)" rx="2" ry="2" />
<text  x="1016.88" y="191.5" >ip_lo..</text>
</g>
<g >
<title>get_timespec64 (1 samples, 1.49%)</title><rect x="820.1" y="469" width="17.7" height="15.0" fill="rgb(217,107,41)" rx="2" ry="2" />
<text  x="823.15" y="479.5" ></text>
</g>
<g >
<title>finish_task_switch (6 samples, 8.96%)</title><rect x="855.4" y="405" width="105.6" height="15.0" fill="rgb(234,49,23)" rx="2" ry="2" />
<text  x="858.37" y="415.5" >finish_task_..</text>
</g>
<g >
<title>sock_write_iter (5 samples, 7.46%)</title><rect x="1101.9" y="437" width="88.1" height="15.0" fill="rgb(234,226,4)" rx="2" ry="2" />
<text  x="1104.94" y="447.5" >sock_write..</text>
</g>
<g >
<title>sock_read_iter (8 samples, 11.94%)</title><rect x="961.0" y="437" width="140.9" height="15.0" fill="rgb(253,229,14)" rx="2" ry="2" />
<text  x="964.04" y="447.5" >sock_read_iter</text>
</g>
<g >
<title>ep_send_events_proc (1 samples, 1.49%)</title><rect x="274.2" y="421" width="17.6" height="15.0" fill="rgb(220,112,14)" rx="2" ry="2" />
<text  x="277.18" y="431.5" ></text>
</g>
</g>
</svg>
