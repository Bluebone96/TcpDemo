<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>__indirect_thunk_start (1 samples, 0.69%)</title><rect x="346.0" y="533" width="8.2" height="15.0" fill="rgb(251,25,46)" rx="2" ry="2" />
<text  x="348.97" y="543.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (32 samples, 22.22%)</title><rect x="927.8" y="293" width="262.2" height="15.0" fill="rgb(212,57,8)" rx="2" ry="2" />
<text  x="930.78" y="303.5" >__local_bh_enable_ip</text>
</g>
<g >
<title>schedule (8 samples, 5.56%)</title><rect x="796.7" y="453" width="65.5" height="15.0" fill="rgb(248,206,14)" rx="2" ry="2" />
<text  x="799.67" y="463.5" >schedule</text>
</g>
<g >
<title>game_server (144 samples, 100.00%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(251,171,6)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >game_server</text>
</g>
<g >
<title>ip_output (32 samples, 22.22%)</title><rect x="927.8" y="325" width="262.2" height="15.0" fill="rgb(253,213,47)" rx="2" ry="2" />
<text  x="930.78" y="335.5" >ip_output</text>
</g>
<g >
<title>timespec64_add_safe (1 samples, 0.69%)</title><rect x="780.3" y="453" width="8.2" height="15.0" fill="rgb(211,1,44)" rx="2" ry="2" />
<text  x="783.28" y="463.5" ></text>
</g>
<g >
<title>__lock_sock (1 samples, 0.69%)</title><rect x="886.8" y="389" width="8.2" height="15.0" fill="rgb(253,130,19)" rx="2" ry="2" />
<text  x="889.81" y="399.5" ></text>
</g>
<g >
<title>ksys_read (7 samples, 4.86%)</title><rect x="862.2" y="501" width="57.4" height="15.0" fill="rgb(236,110,7)" rx="2" ry="2" />
<text  x="865.22" y="511.5" >ksys_r..</text>
</g>
<g >
<title>tcp_data_queue (16 samples, 11.11%)</title><rect x="1050.7" y="85" width="131.1" height="15.0" fill="rgb(226,175,29)" rx="2" ry="2" />
<text  x="1053.69" y="95.5" >tcp_data_queue</text>
</g>
<g >
<title>ip_local_deliver_finish (2 samples, 1.39%)</title><rect x="870.4" y="197" width="16.4" height="15.0" fill="rgb(207,160,39)" rx="2" ry="2" />
<text  x="873.42" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_nanosleep (9 samples, 6.25%)</title><rect x="788.5" y="501" width="73.7" height="15.0" fill="rgb(240,174,28)" rx="2" ry="2" />
<text  x="791.47" y="511.5" >__x64_sy..</text>
</g>
<g >
<title>tcp_sendmsg (33 samples, 22.92%)</title><rect x="919.6" y="421" width="270.4" height="15.0" fill="rgb(211,84,9)" rx="2" ry="2" />
<text  x="922.58" y="431.5" >tcp_sendmsg</text>
</g>
<g >
<title>tcp_write_xmit (1 samples, 0.69%)</title><rect x="878.6" y="117" width="8.2" height="15.0" fill="rgb(236,26,35)" rx="2" ry="2" />
<text  x="881.61" y="127.5" ></text>
</g>
<g >
<title>sock_write_iter (33 samples, 22.92%)</title><rect x="919.6" y="453" width="270.4" height="15.0" fill="rgb(235,149,7)" rx="2" ry="2" />
<text  x="922.58" y="463.5" >sock_write_iter</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.69%)</title><rect x="788.5" y="437" width="8.2" height="15.0" fill="rgb(238,37,12)" rx="2" ry="2" />
<text  x="791.47" y="447.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (2 samples, 1.39%)</title><rect x="870.4" y="245" width="16.4" height="15.0" fill="rgb(242,215,6)" rx="2" ry="2" />
<text  x="873.42" y="255.5" ></text>
</g>
<g >
<title>sock_read_iter (6 samples, 4.17%)</title><rect x="862.2" y="453" width="49.2" height="15.0" fill="rgb(233,15,10)" rx="2" ry="2" />
<text  x="865.22" y="463.5" >sock..</text>
</g>
<g >
<title>sock_def_readable (16 samples, 11.11%)</title><rect x="1050.7" y="69" width="131.1" height="15.0" fill="rgb(220,6,48)" rx="2" ry="2" />
<text  x="1053.69" y="79.5" >sock_def_readable</text>
</g>
<g >
<title>hrtimer_start_range_ns (1 samples, 0.69%)</title><rect x="788.5" y="453" width="8.2" height="15.0" fill="rgb(250,8,32)" rx="2" ry="2" />
<text  x="791.47" y="463.5" ></text>
</g>
<g >
<title>do_softirq.part.19 (32 samples, 22.22%)</title><rect x="927.8" y="277" width="262.2" height="15.0" fill="rgb(248,211,5)" rx="2" ry="2" />
<text  x="930.78" y="287.5" >do_softirq.part.19</text>
</g>
<g >
<title>tcp_rcv_established (1 samples, 0.69%)</title><rect x="878.6" y="149" width="8.2" height="15.0" fill="rgb(228,189,44)" rx="2" ry="2" />
<text  x="881.61" y="159.5" ></text>
</g>
<g >
<title>finish_task_switch (39 samples, 27.08%)</title><rect x="452.5" y="405" width="319.6" height="15.0" fill="rgb(236,175,49)" rx="2" ry="2" />
<text  x="455.50" y="415.5" >finish_task_switch</text>
</g>
<g >
<title>__tcp_transmit_skb (32 samples, 22.22%)</title><rect x="927.8" y="357" width="262.2" height="15.0" fill="rgb(241,65,14)" rx="2" ry="2" />
<text  x="930.78" y="367.5" >__tcp_transmit_skb</text>
</g>
<g >
<title>vfs_read (7 samples, 4.86%)</title><rect x="862.2" y="485" width="57.4" height="15.0" fill="rgb(228,43,7)" rx="2" ry="2" />
<text  x="865.22" y="495.5" >vfs_read</text>
</g>
<g >
<title>__tcp_push_pending_frames (1 samples, 0.69%)</title><rect x="878.6" y="133" width="8.2" height="15.0" fill="rgb(248,4,20)" rx="2" ry="2" />
<text  x="881.61" y="143.5" ></text>
</g>
<g >
<title>net_rx_action (2 samples, 1.39%)</title><rect x="870.4" y="277" width="16.4" height="15.0" fill="rgb(205,45,16)" rx="2" ry="2" />
<text  x="873.42" y="287.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (33 samples, 22.92%)</title><rect x="919.6" y="389" width="270.4" height="15.0" fill="rgb(231,74,14)" rx="2" ry="2" />
<text  x="922.58" y="399.5" >__tcp_push_pending_frames</text>
</g>
<g >
<title>rw_verify_area (1 samples, 0.69%)</title><rect x="911.4" y="469" width="8.2" height="15.0" fill="rgb(205,147,2)" rx="2" ry="2" />
<text  x="914.39" y="479.5" ></text>
</g>
<g >
<title>sock_def_readable (15 samples, 10.42%)</title><rect x="927.8" y="85" width="122.9" height="15.0" fill="rgb(212,156,29)" rx="2" ry="2" />
<text  x="930.78" y="95.5" >sock_def_readable</text>
</g>
<g >
<title>__x64_sys_epoll_wait (50 samples, 34.72%)</title><rect x="378.8" y="501" width="409.7" height="15.0" fill="rgb(212,151,46)" rx="2" ry="2" />
<text  x="381.75" y="511.5" >__x64_sys_epoll_wait</text>
</g>
<g >
<title>hrtimer_start_range_ns (2 samples, 1.39%)</title><rect x="427.9" y="437" width="16.4" height="15.0" fill="rgb(230,1,13)" rx="2" ry="2" />
<text  x="430.92" y="447.5" ></text>
</g>
<g >
<title>vfs_write (33 samples, 22.92%)</title><rect x="919.6" y="485" width="270.4" height="15.0" fill="rgb(241,226,47)" rx="2" ry="2" />
<text  x="922.58" y="495.5" >vfs_write</text>
</g>
<g >
<title>ip_finish_output2 (32 samples, 22.22%)</title><rect x="927.8" y="309" width="262.2" height="15.0" fill="rgb(211,221,38)" rx="2" ry="2" />
<text  x="930.78" y="319.5" >ip_finish_output2</text>
</g>
<g >
<title>do_epoll_wait (50 samples, 34.72%)</title><rect x="378.8" y="485" width="409.7" height="15.0" fill="rgb(245,48,20)" rx="2" ry="2" />
<text  x="381.75" y="495.5" >do_epoll_wait</text>
</g>
<g >
<title>ip_local_deliver (31 samples, 21.53%)</title><rect x="927.8" y="165" width="254.0" height="15.0" fill="rgb(237,105,48)" rx="2" ry="2" />
<text  x="930.78" y="175.5" >ip_local_deliver</text>
</g>
<g >
<title>__wake_up_common_lock (16 samples, 11.11%)</title><rect x="1050.7" y="53" width="131.1" height="15.0" fill="rgb(210,150,38)" rx="2" ry="2" />
<text  x="1053.69" y="63.5" >__wake_up_common..</text>
</g>
<g >
<title>net_rx_action (32 samples, 22.22%)</title><rect x="927.8" y="229" width="262.2" height="15.0" fill="rgb(234,125,8)" rx="2" ry="2" />
<text  x="930.78" y="239.5" >net_rx_action</text>
</g>
<g >
<title>new_sync_read (6 samples, 4.17%)</title><rect x="862.2" y="469" width="49.2" height="15.0" fill="rgb(215,17,22)" rx="2" ry="2" />
<text  x="865.22" y="479.5" >new_..</text>
</g>
<g >
<title>do_softirq_own_stack (2 samples, 1.39%)</title><rect x="870.4" y="309" width="16.4" height="15.0" fill="rgb(240,227,20)" rx="2" ry="2" />
<text  x="873.42" y="319.5" ></text>
</g>
<g >
<title>ip_finish_output2 (3 samples, 2.08%)</title><rect x="862.2" y="357" width="24.6" height="15.0" fill="rgb(220,34,33)" rx="2" ry="2" />
<text  x="865.22" y="367.5" >i..</text>
</g>
<g >
<title>_raw_spin_lock_bh (1 samples, 0.69%)</title><rect x="886.8" y="373" width="8.2" height="15.0" fill="rgb(220,127,53)" rx="2" ry="2" />
<text  x="889.81" y="383.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (32 samples, 22.22%)</title><rect x="927.8" y="261" width="262.2" height="15.0" fill="rgb(247,30,1)" rx="2" ry="2" />
<text  x="930.78" y="271.5" >do_softirq_own_stack</text>
</g>
<g >
<title>lock_sock_nested (1 samples, 0.69%)</title><rect x="886.8" y="405" width="8.2" height="15.0" fill="rgb(226,41,0)" rx="2" ry="2" />
<text  x="889.81" y="415.5" ></text>
</g>
<g >
<title>new_sync_write (33 samples, 22.92%)</title><rect x="919.6" y="469" width="270.4" height="15.0" fill="rgb(247,143,6)" rx="2" ry="2" />
<text  x="922.58" y="479.5" >new_sync_write</text>
</g>
<g >
<title>tcp_v4_rcv (31 samples, 21.53%)</title><rect x="927.8" y="133" width="254.0" height="15.0" fill="rgb(232,112,46)" rx="2" ry="2" />
<text  x="930.78" y="143.5" >tcp_v4_rcv</text>
</g>
<g >
<title>all (144 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(244,64,22)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>__fget_light (2 samples, 1.39%)</title><rect x="378.8" y="469" width="16.3" height="15.0" fill="rgb(224,41,34)" rx="2" ry="2" />
<text  x="381.75" y="479.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (2 samples, 1.39%)</title><rect x="895.0" y="389" width="16.4" height="15.0" fill="rgb(252,0,18)" rx="2" ry="2" />
<text  x="898.00" y="399.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (15 samples, 10.42%)</title><rect x="927.8" y="69" width="122.9" height="15.0" fill="rgb(243,46,24)" rx="2" ry="2" />
<text  x="930.78" y="79.5" >__wake_up_commo..</text>
</g>
<g >
<title>schedule_hrtimeout_range (1 samples, 0.69%)</title><rect x="419.7" y="453" width="8.2" height="15.0" fill="rgb(241,100,8)" rx="2" ry="2" />
<text  x="422.72" y="463.5" ></text>
</g>
<g >
<title>ksys_write (33 samples, 22.92%)</title><rect x="919.6" y="501" width="270.4" height="15.0" fill="rgb(236,77,29)" rx="2" ry="2" />
<text  x="922.58" y="511.5" >ksys_write</text>
</g>
<g >
<title>__tcp_transmit_skb (1 samples, 0.69%)</title><rect x="878.6" y="101" width="8.2" height="15.0" fill="rgb(244,63,48)" rx="2" ry="2" />
<text  x="881.61" y="111.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (32 samples, 22.22%)</title><rect x="927.8" y="341" width="262.2" height="15.0" fill="rgb(232,173,11)" rx="2" ry="2" />
<text  x="930.78" y="351.5" >__ip_queue_xmit</text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (1 samples, 0.69%)</title><rect x="886.8" y="357" width="8.2" height="15.0" fill="rgb(230,99,1)" rx="2" ry="2" />
<text  x="889.81" y="367.5" ></text>
</g>
<g >
<title>ip_rcv_core.isra.19 (1 samples, 0.69%)</title><rect x="1181.8" y="165" width="8.2" height="15.0" fill="rgb(246,201,23)" rx="2" ry="2" />
<text  x="1184.81" y="175.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (31 samples, 21.53%)</title><rect x="927.8" y="149" width="254.0" height="15.0" fill="rgb(206,64,49)" rx="2" ry="2" />
<text  x="930.78" y="159.5" >ip_local_deliver_finish</text>
</g>
<g >
<title>tcp_rcv_established (31 samples, 21.53%)</title><rect x="927.8" y="101" width="254.0" height="15.0" fill="rgb(216,121,0)" rx="2" ry="2" />
<text  x="930.78" y="111.5" >tcp_rcv_established</text>
</g>
<g >
<title>ep_poll (48 samples, 33.33%)</title><rect x="395.1" y="469" width="393.4" height="15.0" fill="rgb(238,71,42)" rx="2" ry="2" />
<text  x="398.14" y="479.5" >ep_poll</text>
</g>
<g >
<title>hrtimer_nanosleep (9 samples, 6.25%)</title><rect x="788.5" y="485" width="73.7" height="15.0" fill="rgb(213,182,23)" rx="2" ry="2" />
<text  x="791.47" y="495.5" >hrtimer_..</text>
</g>
<g >
<title>__tcp_transmit_skb (3 samples, 2.08%)</title><rect x="862.2" y="405" width="24.6" height="15.0" fill="rgb(220,47,46)" rx="2" ry="2" />
<text  x="865.22" y="415.5" >_..</text>
</g>
<g >
<title>process_backlog (2 samples, 1.39%)</title><rect x="870.4" y="261" width="16.4" height="15.0" fill="rgb(236,81,43)" rx="2" ry="2" />
<text  x="873.42" y="271.5" ></text>
</g>
<g >
<title>__schedule (8 samples, 5.56%)</title><rect x="796.7" y="437" width="65.5" height="15.0" fill="rgb(221,217,13)" rx="2" ry="2" />
<text  x="799.67" y="447.5" >__sched..</text>
</g>
<g >
<title>ip_rcv (32 samples, 22.22%)</title><rect x="927.8" y="181" width="262.2" height="15.0" fill="rgb(249,208,39)" rx="2" ry="2" />
<text  x="930.78" y="191.5" >ip_rcv</text>
</g>
<g >
<title>tcp_write_xmit (33 samples, 22.92%)</title><rect x="919.6" y="373" width="270.4" height="15.0" fill="rgb(247,182,40)" rx="2" ry="2" />
<text  x="922.58" y="383.5" >tcp_write_xmit</text>
</g>
<g >
<title>ip_output (3 samples, 2.08%)</title><rect x="862.2" y="373" width="24.6" height="15.0" fill="rgb(230,83,30)" rx="2" ry="2" />
<text  x="865.22" y="383.5" >i..</text>
</g>
<g >
<title>ip_local_deliver (2 samples, 1.39%)</title><rect x="870.4" y="213" width="16.4" height="15.0" fill="rgb(205,190,31)" rx="2" ry="2" />
<text  x="873.42" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (15 samples, 10.42%)</title><rect x="927.8" y="53" width="122.9" height="15.0" fill="rgb(250,154,4)" rx="2" ry="2" />
<text  x="930.78" y="63.5" >_raw_spin_unloc..</text>
</g>
<g >
<title>tcp_v4_do_rcv (31 samples, 21.53%)</title><rect x="927.8" y="117" width="254.0" height="15.0" fill="rgb(237,134,46)" rx="2" ry="2" />
<text  x="930.78" y="127.5" >tcp_v4_do_rcv</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (42 samples, 29.17%)</title><rect x="427.9" y="453" width="344.2" height="15.0" fill="rgb(245,30,39)" rx="2" ry="2" />
<text  x="430.92" y="463.5" >schedule_hrtimeout_range_clock</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 1.39%)</title><rect x="895.0" y="373" width="16.4" height="15.0" fill="rgb(221,46,48)" rx="2" ry="2" />
<text  x="898.00" y="383.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 1.39%)</title><rect x="427.9" y="421" width="16.4" height="15.0" fill="rgb(231,121,1)" rx="2" ry="2" />
<text  x="430.92" y="431.5" ></text>
</g>
<g >
<title>release_sock (2 samples, 1.39%)</title><rect x="895.0" y="405" width="16.4" height="15.0" fill="rgb(207,22,27)" rx="2" ry="2" />
<text  x="898.00" y="415.5" ></text>
</g>
<g >
<title>tcp_recvmsg (6 samples, 4.17%)</title><rect x="862.2" y="421" width="49.2" height="15.0" fill="rgb(225,160,4)" rx="2" ry="2" />
<text  x="865.22" y="431.5" >tcp_..</text>
</g>
<g >
<title>do_syscall_64 (102 samples, 70.83%)</title><rect x="354.2" y="517" width="835.8" height="15.0" fill="rgb(250,102,16)" rx="2" ry="2" />
<text  x="357.17" y="527.5" >do_syscall_64</text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 0.69%)</title><rect x="878.6" y="165" width="8.2" height="15.0" fill="rgb(249,98,13)" rx="2" ry="2" />
<text  x="881.61" y="175.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (33 samples, 22.92%)</title><rect x="919.6" y="405" width="270.4" height="15.0" fill="rgb(237,114,19)" rx="2" ry="2" />
<text  x="922.58" y="415.5" >tcp_sendmsg_locked</text>
</g>
<g >
<title>__schedule (39 samples, 27.08%)</title><rect x="452.5" y="421" width="319.6" height="15.0" fill="rgb(251,20,30)" rx="2" ry="2" />
<text  x="455.50" y="431.5" >__schedule</text>
</g>
<g >
<title>__netif_receive_skb_one_core (32 samples, 22.22%)</title><rect x="927.8" y="197" width="262.2" height="15.0" fill="rgb(237,213,2)" rx="2" ry="2" />
<text  x="930.78" y="207.5" >__netif_receive_skb_one_core</text>
</g>
<g >
<title>do_nanosleep (9 samples, 6.25%)</title><rect x="788.5" y="469" width="73.7" height="15.0" fill="rgb(209,166,46)" rx="2" ry="2" />
<text  x="791.47" y="479.5" >do_nanos..</text>
</g>
<g >
<title>inet_recvmsg (6 samples, 4.17%)</title><rect x="862.2" y="437" width="49.2" height="15.0" fill="rgb(205,146,9)" rx="2" ry="2" />
<text  x="865.22" y="447.5" >inet..</text>
</g>
<g >
<title>finish_task_switch (8 samples, 5.56%)</title><rect x="796.7" y="421" width="65.5" height="15.0" fill="rgb(213,65,50)" rx="2" ry="2" />
<text  x="799.67" y="431.5" >finish_..</text>
</g>
<g >
<title>process_backlog (32 samples, 22.22%)</title><rect x="927.8" y="213" width="262.2" height="15.0" fill="rgb(248,171,11)" rx="2" ry="2" />
<text  x="930.78" y="223.5" >process_backlog</text>
</g>
<g >
<title>sock_sendmsg (33 samples, 22.92%)</title><rect x="919.6" y="437" width="270.4" height="15.0" fill="rgb(208,124,3)" rx="2" ry="2" />
<text  x="922.58" y="447.5" >sock_sendmsg</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (102 samples, 70.83%)</title><rect x="354.2" y="533" width="835.8" height="15.0" fill="rgb(232,86,35)" rx="2" ry="2" />
<text  x="357.17" y="543.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__softirqentry_text_start (32 samples, 22.22%)</title><rect x="927.8" y="245" width="262.2" height="15.0" fill="rgb(228,162,52)" rx="2" ry="2" />
<text  x="930.78" y="255.5" >__softirqentry_text_start</text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 1.39%)</title><rect x="870.4" y="293" width="16.4" height="15.0" fill="rgb(248,125,35)" rx="2" ry="2" />
<text  x="873.42" y="303.5" ></text>
</g>
<g >
<title>schedule (40 samples, 27.78%)</title><rect x="444.3" y="437" width="327.8" height="15.0" fill="rgb(246,109,33)" rx="2" ry="2" />
<text  x="447.31" y="447.5" >schedule</text>
</g>
<g >
<title>do_softirq.part.19 (2 samples, 1.39%)</title><rect x="870.4" y="325" width="16.4" height="15.0" fill="rgb(228,161,31)" rx="2" ry="2" />
<text  x="873.42" y="335.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (2 samples, 1.39%)</title><rect x="870.4" y="341" width="16.4" height="15.0" fill="rgb(223,16,43)" rx="2" ry="2" />
<text  x="873.42" y="351.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (16 samples, 11.11%)</title><rect x="1050.7" y="37" width="131.1" height="15.0" fill="rgb(229,29,44)" rx="2" ry="2" />
<text  x="1053.69" y="47.5" >_raw_spin_unlock..</text>
</g>
<g >
<title>skb_clone (1 samples, 0.69%)</title><rect x="878.6" y="85" width="8.2" height="15.0" fill="rgb(239,91,25)" rx="2" ry="2" />
<text  x="881.61" y="95.5" ></text>
</g>
<g >
<title>ip_rcv (2 samples, 1.39%)</title><rect x="870.4" y="229" width="16.4" height="15.0" fill="rgb(224,181,28)" rx="2" ry="2" />
<text  x="873.42" y="239.5" ></text>
</g>
<g >
<title>ep_scan_ready_list.constprop.22 (2 samples, 1.39%)</title><rect x="403.3" y="453" width="16.4" height="15.0" fill="rgb(225,32,1)" rx="2" ry="2" />
<text  x="406.33" y="463.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (3 samples, 2.08%)</title><rect x="862.2" y="389" width="24.6" height="15.0" fill="rgb(221,193,29)" rx="2" ry="2" />
<text  x="865.22" y="399.5" >_..</text>
</g>
<g >
<title>select_estimate_accuracy (1 samples, 0.69%)</title><rect x="772.1" y="453" width="8.2" height="15.0" fill="rgb(249,107,18)" rx="2" ry="2" />
<text  x="775.08" y="463.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (2 samples, 1.39%)</title><rect x="870.4" y="181" width="16.4" height="15.0" fill="rgb(239,54,30)" rx="2" ry="2" />
<text  x="873.42" y="191.5" ></text>
</g>
</g>
</svg>
