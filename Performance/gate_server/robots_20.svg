<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="694.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="677" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="677" > </text>
<g id="frames">
<g >
<title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="1096.5" y="37" width="0.1" height="15.0" fill="rgb(238,205,50)" rx="2" ry="2" />
<text  x="1099.47" y="47.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="1096.5" y="69" width="0.1" height="15.0" fill="rgb(209,68,31)" rx="2" ry="2" />
<text  x="1099.47" y="79.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (64 samples, 0.89%)</title><rect x="1086.1" y="309" width="10.5" height="15.0" fill="rgb(242,27,26)" rx="2" ry="2" />
<text  x="1089.13" y="319.5" ></text>
</g>
<g >
<title>e1000_xmit_frame (567 samples, 7.88%)</title><rect x="1096.6" y="309" width="93.1" height="15.0" fill="rgb(241,98,1)" rx="2" ry="2" />
<text  x="1099.63" y="319.5" >e1000_xmit_..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (632 samples, 8.79%)</title><rect x="1086.0" y="341" width="103.7" height="15.0" fill="rgb(229,33,30)" rx="2" ry="2" />
<text  x="1088.96" y="351.5" >[[kernel.kal..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,607 samples, 64.07%)</title><rect x="434.0" y="613" width="756.0" height="15.0" fill="rgb(209,81,24)" rx="2" ry="2" />
<text  x="437.02" y="623.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>uhci_hub_status_data (1 samples, 0.01%)</title><rect x="1189.8" y="501" width="0.2" height="15.0" fill="rgb(231,25,46)" rx="2" ry="2" />
<text  x="1192.84" y="511.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (4,533 samples, 63.04%)</title><rect x="446.2" y="597" width="743.8" height="15.0" fill="rgb(239,129,13)" rx="2" ry="2" />
<text  x="449.16" y="607.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (7 samples, 0.10%)</title><rect x="1188.5" y="245" width="1.2" height="15.0" fill="rgb(240,105,7)" rx="2" ry="2" />
<text  x="1191.52" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,684 samples, 51.23%)</title><rect x="585.5" y="581" width="604.5" height="15.0" fill="rgb(254,205,54)" rx="2" ry="2" />
<text  x="588.48" y="591.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>uhci_hub_status_data (1 samples, 0.01%)</title><rect x="1189.7" y="405" width="0.1" height="15.0" fill="rgb(231,57,26)" rx="2" ry="2" />
<text  x="1192.67" y="415.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,263 samples, 45.38%)</title><rect x="654.6" y="533" width="535.4" height="15.0" fill="rgb(213,121,24)" rx="2" ry="2" />
<text  x="657.56" y="543.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,073 samples, 28.83%)</title><rect x="849.7" y="485" width="340.1" height="15.0" fill="rgb(210,189,41)" rx="2" ry="2" />
<text  x="852.67" y="495.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,838 samples, 39.47%)</title><rect x="724.1" y="517" width="465.7" height="15.0" fill="rgb(215,114,3)" rx="2" ry="2" />
<text  x="727.14" y="527.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (62 samples, 0.86%)</title><rect x="1086.5" y="245" width="10.1" height="15.0" fill="rgb(252,189,17)" rx="2" ry="2" />
<text  x="1089.46" y="255.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2 samples, 0.03%)</title><rect x="1096.3" y="101" width="0.3" height="15.0" fill="rgb(227,20,28)" rx="2" ry="2" />
<text  x="1099.30" y="111.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (63 samples, 0.88%)</title><rect x="1086.3" y="277" width="10.3" height="15.0" fill="rgb(254,92,3)" rx="2" ry="2" />
<text  x="1089.29" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (55 samples, 0.76%)</title><rect x="1087.6" y="133" width="9.0" height="15.0" fill="rgb(222,97,16)" rx="2" ry="2" />
<text  x="1090.61" y="143.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (55 samples, 0.76%)</title><rect x="1087.6" y="149" width="9.0" height="15.0" fill="rgb(207,117,21)" rx="2" ry="2" />
<text  x="1090.61" y="159.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7 samples, 0.10%)</title><rect x="1188.5" y="293" width="1.2" height="15.0" fill="rgb(206,186,25)" rx="2" ry="2" />
<text  x="1191.52" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (641 samples, 8.91%)</title><rect x="1084.5" y="421" width="105.2" height="15.0" fill="rgb(206,77,6)" rx="2" ry="2" />
<text  x="1087.49" y="431.5" >[[kernel.kal..</text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.01%)</title><rect x="1189.7" y="421" width="0.1" height="15.0" fill="rgb(225,181,53)" rx="2" ry="2" />
<text  x="1192.67" y="431.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (2,790 samples, 38.80%)</title><rect x="732.0" y="501" width="457.8" height="15.0" fill="rgb(212,170,31)" rx="2" ry="2" />
<text  x="735.01" y="511.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>gate_server (7,191 samples, 100.00%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(208,134,5)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >gate_server</text>
</g>
<g >
<title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="1189.7" y="389" width="0.1" height="15.0" fill="rgb(213,90,34)" rx="2" ry="2" />
<text  x="1192.67" y="399.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (63 samples, 0.88%)</title><rect x="1086.3" y="261" width="10.3" height="15.0" fill="rgb(211,85,16)" rx="2" ry="2" />
<text  x="1089.29" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7 samples, 0.10%)</title><rect x="1188.5" y="261" width="1.2" height="15.0" fill="rgb(235,228,12)" rx="2" ry="2" />
<text  x="1191.52" y="271.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,557 samples, 49.46%)</title><rect x="606.3" y="565" width="583.7" height="15.0" fill="rgb(235,0,1)" rx="2" ry="2" />
<text  x="609.32" y="575.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (635 samples, 8.83%)</title><rect x="1085.5" y="373" width="104.2" height="15.0" fill="rgb(251,144,5)" rx="2" ry="2" />
<text  x="1088.47" y="383.5" >[[kernel.kal..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (632 samples, 8.79%)</title><rect x="1086.0" y="325" width="103.7" height="15.0" fill="rgb(231,91,16)" rx="2" ry="2" />
<text  x="1088.96" y="335.5" >[[kernel.kal..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (2 samples, 0.03%)</title><rect x="1096.3" y="85" width="0.3" height="15.0" fill="rgb(226,21,20)" rx="2" ry="2" />
<text  x="1099.30" y="95.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (55 samples, 0.76%)</title><rect x="1087.6" y="165" width="9.0" height="15.0" fill="rgb(209,31,50)" rx="2" ry="2" />
<text  x="1090.61" y="175.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (59 samples, 0.82%)</title><rect x="1086.9" y="213" width="9.7" height="15.0" fill="rgb(212,167,41)" rx="2" ry="2" />
<text  x="1089.95" y="223.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (3,436 samples, 47.78%)</title><rect x="626.2" y="549" width="563.8" height="15.0" fill="rgb(243,173,14)" rx="2" ry="2" />
<text  x="629.17" y="559.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (29 samples, 0.40%)</title><rect x="1091.9" y="117" width="4.7" height="15.0" fill="rgb(249,107,24)" rx="2" ry="2" />
<text  x="1094.87" y="127.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="1096.5" y="53" width="0.1" height="15.0" fill="rgb(240,163,9)" rx="2" ry="2" />
<text  x="1099.47" y="63.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (819 samples, 11.39%)</title><rect x="1055.4" y="437" width="134.4" height="15.0" fill="rgb(229,69,23)" rx="2" ry="2" />
<text  x="1058.44" y="447.5" >[[kernel.kallsym..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (56 samples, 0.78%)</title><rect x="1087.4" y="181" width="9.2" height="15.0" fill="rgb(245,76,35)" rx="2" ry="2" />
<text  x="1090.44" y="191.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (638 samples, 8.87%)</title><rect x="1085.0" y="389" width="104.7" height="15.0" fill="rgb(247,66,23)" rx="2" ry="2" />
<text  x="1087.98" y="399.5" >[[kernel.kal..</text>
</g>
<g >
<title>all (7,191 samples, 100%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(206,120,47)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (63 samples, 0.88%)</title><rect x="1086.3" y="293" width="10.3" height="15.0" fill="rgb(244,88,24)" rx="2" ry="2" />
<text  x="1089.29" y="303.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (58 samples, 0.81%)</title><rect x="1087.1" y="197" width="9.5" height="15.0" fill="rgb(232,11,32)" rx="2" ry="2" />
<text  x="1090.11" y="207.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,207 samples, 16.78%)</title><rect x="991.8" y="453" width="198.0" height="15.0" fill="rgb(249,154,52)" rx="2" ry="2" />
<text  x="994.77" y="463.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.01%)</title><rect x="1189.8" y="517" width="0.2" height="15.0" fill="rgb(245,188,32)" rx="2" ry="2" />
<text  x="1192.84" y="527.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="1189.8" y="485" width="0.2" height="15.0" fill="rgb(224,57,52)" rx="2" ry="2" />
<text  x="1192.84" y="495.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (7 samples, 0.10%)</title><rect x="1188.5" y="277" width="1.2" height="15.0" fill="rgb(217,132,16)" rx="2" ry="2" />
<text  x="1191.52" y="287.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (632 samples, 8.79%)</title><rect x="1086.0" y="357" width="103.7" height="15.0" fill="rgb(237,196,5)" rx="2" ry="2" />
<text  x="1088.96" y="367.5" >[[kernel.kal..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (61 samples, 0.85%)</title><rect x="1086.6" y="229" width="10.0" height="15.0" fill="rgb(220,94,44)" rx="2" ry="2" />
<text  x="1089.62" y="239.5" ></text>
</g>
<g >
<title>[[kernel.kallsyms]] (1,577 samples, 21.93%)</title><rect x="931.1" y="469" width="258.7" height="15.0" fill="rgb(209,168,15)" rx="2" ry="2" />
<text  x="934.06" y="479.5" >[[kernel.kallsyms]]</text>
</g>
<g >
<title>[[kernel.kallsyms]] (640 samples, 8.90%)</title><rect x="1084.7" y="405" width="105.0" height="15.0" fill="rgb(206,158,24)" rx="2" ry="2" />
<text  x="1087.65" y="415.5" >[[kernel.kal..</text>
</g>
</g>
</svg>
